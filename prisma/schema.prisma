generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model FundHouse {
  id          String       @id @default(uuid())
  name        String       @unique
  code        String?      @unique
  description String?      @db.Text
  website     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  mutualFunds MutualFund[]
}

model FundCategory {
  id          String       @id @default(uuid())
  name        String       @unique
  code        String?      @unique
  description String?      @db.Text
  riskLevel   RiskLevel    @default(MODERATE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  mutualFunds MutualFund[]
}

model TaxCategory {
  id            String       @id @default(uuid())
  name          String       @unique
  code          String?      @unique
  description   String?      @db.Text
  holdingPeriod Int         // in months
  taxRate       Decimal?    @db.Decimal(5, 2)  // for fixed rate categories
  hasIndexation Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  mutualFunds   MutualFund[]
}

model MutualFund {
  id            String       @id @default(uuid())
  schemeCode    String      @unique  // from API
  schemeName    String      // from API
  schemeType    String      // from API (e.g., Open Ended, Close Ended)
  fundHouseId   String
  fundHouse     FundHouse    @relation(fields: [fundHouseId], references: [id])
  categoryId    String
  category      FundCategory @relation(fields: [categoryId], references: [id])
  taxCategoryId String
  taxCategory   TaxCategory  @relation(fields: [taxCategoryId], references: [id])
  isin          String?     // Optional ISIN number
  benchmark     String?     // Benchmark index
  expenseRatio  Decimal?    @db.Decimal(5, 2)
  minInvestment Decimal?    @db.Decimal(10, 2)
  navHistory    NAVHistory[]
  holdings      Holding[]   
  basketAllocations BasketAllocation[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([fundHouseId])
  @@index([categoryId])
  @@index([taxCategoryId])
  @@index([schemeType])
}

model NAVHistory {
  id          String      @id @default(uuid())
  fundId      String
  date        DateTime
  nav         Decimal     @db.Decimal(10, 4)
  fund        MutualFund  @relation(fields: [fundId], references: [id])
  createdAt   DateTime    @default(now())

  @@unique([fundId, date])  // Add this unique constraint
  @@index([fundId, date])
}

enum IndexType {
  BROAD_BASED
  SECTORAL
  THEMATIC
}

model MarketIndex {
  id          String        @id @default(uuid())
  name        String        @unique  // e.g., "Nifty 50", "Bank Nifty"
  code        String        @unique  // e.g., "NIFTY", "BANKNIFTY"
  description String?       @db.Text
  indexType   IndexType     @default(BROAD_BASED)  // Added this field
  history     IndexHistory[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model IndexHistory {
  id          String      @id @default(uuid())
  indexId     String
  index       MarketIndex       @relation(fields: [indexId], references: [id])
  date        DateTime
  open        Decimal     @db.Decimal(10, 2)
  high        Decimal     @db.Decimal(10, 2)
  low         Decimal     @db.Decimal(10, 2)
  close       Decimal     @db.Decimal(10, 2)
  volume      BigInt?
  createdAt   DateTime    @default(now())

  @@unique([indexId, date])
  @@index([indexId, date])
}

model Holding {
  id          String      @id @default(uuid())
  fundId      String
  fund        MutualFund  @relation(fields: [fundId], references: [id])
  companyName String
  percentage  Decimal     @db.Decimal(5, 2)
  sector      String?
  updatedAt   DateTime    @default(now())

  @@index([fundId])
}

model Basket {
  id          String      @id @default(uuid())
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  fundAllocations BasketAllocation[]
}

model BasketAllocation {
  id          String      @id @default(uuid())
  basketId    String
  fundId      String
  allocation  Decimal     @db.Decimal(5, 2)  // Percentage allocation
  basket      Basket      @relation(fields: [basketId], references: [id])
  fund        MutualFund  @relation(fields: [fundId], references: [id])
  createdAt   DateTime    @default(now())

  @@index([basketId])
  @@index([fundId])
}

enum RiskLevel {
  VERY_LOW
  LOW
  MODERATE
  HIGH
  VERY_HIGH
}